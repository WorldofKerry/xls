package adler32

file_number 0 "adler32.x"

fn __adler32__compound_adder__9(a: bits[9], b: bits[9]) -> (bits[9], bits[9]) {
  add.5: bits[9] = add(a, b, id=5, pos=[(0,2374,14)])
  literal.6: bits[9] = literal(value=1, id=6, pos=[(0,2374,30)])
  add.4: bits[9] = add(a, b, id=4, pos=[(0,2374,7)])
  add.7: bits[9] = add(add.5, literal.6, id=7, pos=[(0,2374,18)])
  WIDTH: bits[32] = literal(value=9, id=3, pos=[(0,2373,18)])
  ret tuple.8: (bits[9], bits[9]) = tuple(add.4, add.7, id=8, pos=[(0,2374,4)])
}

fn __adler32__sign_magnitude_difference__8(a: bits[8], b: bits[8]) -> (bits[1], bits[8]) {
  not.13: bits[8] = not(b, id=13, pos=[(0,2388,69)])
  zero_ext.12: bits[9] = zero_ext(a, new_bit_count=9, id=12)
  zero_ext.14: bits[9] = zero_ext(not.13, new_bit_count=9, id=14)
  invoke.15: (bits[9], bits[9]) = invoke(zero_ext.12, zero_ext.14, to_apply=__adler32__compound_adder__9, id=15, pos=[(0,2388,47)])
  sum: bits[9] = tuple_index(invoke.15, index=0, id=16, pos=[(0,2388,9)])
  bit_slice.18: bits[1] = bit_slice(sum, start=8, width=1, id=18, pos=[(0,2389,36)])
  a_is_less_equal: bits[1] = not(bit_slice.18, id=19, pos=[(0,2389,32)])
  incremented_sum: bits[9] = tuple_index(invoke.15, index=1, id=17, pos=[(0,2388,14)])
  not.20: bits[9] = not(sum, id=20, pos=[(0,2391,46)])
  abs_difference: bits[9] = sel(a_is_less_equal, cases=[incremented_sum, not.20], id=21, pos=[(0,2391,25)])
  bit_slice.22: bits[8] = bit_slice(abs_difference, start=0, width=8, id=22)
  WIDTH: bits[32] = literal(value=8, id=11, pos=[(0,2381,29)])
  ret tuple.23: (bits[1], bits[8]) = tuple(a_is_less_equal, bit_slice.22, id=23, pos=[(0,2392,4)])
}

fn __adler32__mask_bits__8() -> bits[8] {
  literal.25: bits[8] = literal(value=0, id=25, pos=[(0,518,49)])
  X: bits[32] = literal(value=8, id=24, pos=[(0,518,17)])
  ret not.26: bits[8] = not(literal.25, id=26, pos=[(0,518,40)])
}

fn __adler32__is_inf__8_23(x: (bits[1], bits[8], bits[23])) -> bits[1] {
  x_bexp: bits[8] = tuple_index(x, index=1, id=30, pos=[(0,1022,6)])
  invoke.31: bits[8] = invoke(to_apply=__adler32__mask_bits__8, id=31, pos=[(0,1022,24)])
  x_fraction: bits[23] = tuple_index(x, index=2, id=33, pos=[(0,1022,39)])
  literal.34: bits[23] = literal(value=0, id=34, pos=[(0,1022,70)])
  eq.32: bits[1] = eq(x_bexp, invoke.31, id=32, pos=[(0,1022,12)])
  eq.35: bits[1] = eq(x_fraction, literal.34, id=35, pos=[(0,1022,49)])
  EXP_SZ: bits[32] = literal(value=8, id=28, pos=[(0,1021,14)])
  FRACTION_SZ: bits[32] = literal(value=23, id=29, pos=[(0,1021,27)])
  ret and.36: bits[1] = and(eq.32, eq.35, id=36, pos=[(0,1022,35)])
}

fn __adler32__is_nan__8_23(x: (bits[1], bits[8], bits[23])) -> bits[1] {
  x_bexp: bits[8] = tuple_index(x, index=1, id=40, pos=[(0,999,6)])
  invoke.41: bits[8] = invoke(to_apply=__adler32__mask_bits__8, id=41, pos=[(0,999,24)])
  x_fraction: bits[23] = tuple_index(x, index=2, id=43, pos=[(0,999,39)])
  literal.44: bits[23] = literal(value=0, id=44, pos=[(0,999,70)])
  eq.42: bits[1] = eq(x_bexp, invoke.41, id=42, pos=[(0,999,12)])
  ne.45: bits[1] = ne(x_fraction, literal.44, id=45, pos=[(0,999,49)])
  EXP_SZ: bits[32] = literal(value=8, id=38, pos=[(0,998,14)])
  FRACTION_SZ: bits[32] = literal(value=23, id=39, pos=[(0,998,27)])
  ret and.46: bits[1] = and(eq.42, ne.45, id=46, pos=[(0,999,35)])
}

fn __itok__adler32__add__8_23(__token: token, __activated: bits[1], a: (bits[1], bits[8], bits[23]), b: (bits[1], bits[8], bits[23])) -> (token, (bits[1], bits[8], bits[23])) {
  a_bexp: bits[8] = tuple_index(a, index=1, id=67, pos=[(0,2466,59)])
  b_bexp: bits[8] = tuple_index(b, index=1, id=68, pos=[(0,2466,67)])
  invoke.69: (bits[1], bits[8]) = invoke(a_bexp, b_bexp, to_apply=__adler32__sign_magnitude_difference__8, id=69, pos=[(0,2466,57)])
  a_is_smaller: bits[1] = tuple_index(invoke.69, index=0, id=70, pos=[(0,2466,9)])
  tuple.73: ((bits[1], bits[8], bits[23]), (bits[1], bits[8], bits[23])) = tuple(a, b, id=73, pos=[(0,2467,51)])
  tuple.72: ((bits[1], bits[8], bits[23]), (bits[1], bits[8], bits[23])) = tuple(b, a, id=72, pos=[(0,2467,35)])
  sel.74: ((bits[1], bits[8], bits[23]), (bits[1], bits[8], bits[23])) = sel(a_is_smaller, cases=[tuple.73, tuple.72], id=74, pos=[(0,2467,17)])
  y: (bits[1], bits[8], bits[23]) = tuple_index(sel.74, index=1, id=76, pos=[(0,2467,12)])
  SIGN_BIT: bits[32] = literal(value=1, id=57, pos=[(0,2454,25)])
  HIDDEN_BIT: bits[32] = literal(value=1, id=58, pos=[(0,2455,27)])
  x: (bits[1], bits[8], bits[23]) = tuple_index(sel.74, index=0, id=75, pos=[(0,2467,9)])
  literal.82: bits[1] = literal(value=1, id=82, pos=[(0,2471,21)])
  y_fraction: bits[23] = tuple_index(y, index=2, id=83, pos=[(0,2471,27)])
  add.60: bits[32] = add(SIGN_BIT, HIDDEN_BIT, id=60, pos=[(0,2457,40)])
  FRACTION_SZ: bits[32] = literal(value=23, id=52, pos=[(0,2444,24)])
  literal.77: bits[1] = literal(value=1, id=77, pos=[(0,2470,21)])
  x_fraction: bits[23] = tuple_index(x, index=2, id=78, pos=[(0,2470,27)])
  concat.84: bits[24] = concat(literal.82, y_fraction, id=84, pos=[(0,2471,23)])
  add.61: bits[32] = add(add.60, FRACTION_SZ, id=61, pos=[(0,2457,53)])
  GUARD_ROUND_STICKY_BITS: bits[32] = literal(value=3, id=59, pos=[(0,2456,40)])
  concat.79: bits[24] = concat(literal.77, x_fraction, id=79, pos=[(0,2470,23)])
  y_bexp: bits[8] = tuple_index(y, index=1, id=92, pos=[(0,2475,21)])
  literal.93: bits[8] = literal(value=0, id=93, pos=[(0,2475,41)])
  zero_ext.85: bits[28] = zero_ext(concat.84, new_bit_count=28, id=85)
  WIDE_FRACTION: bits[32] = add(add.61, GUARD_ROUND_STICKY_BITS, id=62, pos=[(0,2457,67)])
  x_bexp: bits[8] = tuple_index(x, index=1, id=87, pos=[(0,2474,21)])
  literal.88: bits[8] = literal(value=0, id=88, pos=[(0,2474,41)])
  zero_ext.80: bits[28] = zero_ext(concat.79, new_bit_count=28, id=80)
  eq.94: bits[1] = eq(y_bexp, literal.93, id=94, pos=[(0,2475,27)])
  wide_y: bits[28] = shll(zero_ext.85, GUARD_ROUND_STICKY_BITS, id=86, pos=[(0,2471,59)])
  literal.95: bits[28] = literal(value=0, id=95, pos=[(0,2475,63)])
  bit_slice.103: bits[8] = bit_slice(WIDE_FRACTION, start=0, width=8, id=103)
  shift: bits[8] = tuple_index(invoke.69, index=1, id=71, pos=[(0,2466,23)])
  eq.89: bits[1] = eq(x_bexp, literal.88, id=89, pos=[(0,2474,27)])
  wide_x: bits[28] = shll(zero_ext.80, GUARD_ROUND_STICKY_BITS, id=81, pos=[(0,2470,59)])
  literal.90: bits[28] = literal(value=0, id=90, pos=[(0,2474,63)])
  wide_y__1: bits[28] = sel(eq.94, cases=[wide_y, literal.95], id=96, pos=[(0,2475,17)])
  sub.104: bits[8] = sub(bit_slice.103, shift, id=104, pos=[(0,2486,57)])
  wide_x__1: bits[28] = sel(eq.89, cases=[wide_x, literal.90], id=91, pos=[(0,2474,17)])
  dropped: bits[28] = shll(wide_y__1, sub.104, id=105, pos=[(0,2486,25)])
  literal.106: bits[28] = literal(value=0, id=106, pos=[(0,2487,47)])
  x_sign: bits[1] = tuple_index(x, index=0, id=98, pos=[(0,2481,23)])
  y_sign: bits[1] = tuple_index(y, index=0, id=99, pos=[(0,2481,33)])
  addend_x: bits[28] = zero_ext(wide_x__1, new_bit_count=28, id=97)
  shrl.109: bits[28] = shrl(wide_y__1, shift, id=109, pos=[(0,2488,27)])
  ne.107: bits[1] = ne(dropped, literal.106, id=107, pos=[(0,2487,26)])
  ne.100: bits[1] = ne(x_sign, y_sign, id=100, pos=[(0,2481,29)])
  neg.101: bits[28] = neg(addend_x, id=101, pos=[(0,2481,41)])
  zero_ext.110: bits[28] = zero_ext(shrl.109, new_bit_count=28, id=110)
  sticky: bits[28] = zero_ext(ne.107, new_bit_count=28, id=108)
  addend_x__1: bits[28] = sel(ne.100, cases=[addend_x, neg.101], id=102, pos=[(0,2481,19)])
  addend_y: bits[28] = or(zero_ext.110, sticky, id=111, pos=[(0,2488,58)])
  sign_ext.112: bits[29] = sign_ext(addend_x__1, new_bit_count=29, id=112)
  sign_ext.113: bits[29] = sign_ext(addend_y, new_bit_count=29, id=113)
  fraction: bits[29] = add(sign_ext.112, sign_ext.113, id=114, pos=[(0,2492,52)])
  literal.147: bits[29] = literal(value=0, id=147, pos=[(0,2502,42)])
  slt.148: bits[1] = slt(fraction, literal.147, id=148, pos=[(0,2502,21)])
  neg.149: bits[29] = neg(fraction, id=149, pos=[(0,2502,46)])
  sel.150: bits[29] = sel(slt.148, cases=[fraction, neg.149], id=150, pos=[(0,2502,9)])
  abs_fraction: bits[28] = bit_slice(sel.150, start=0, width=28, id=151)
  reverse.159: bits[28] = reverse(abs_fraction, id=159, pos=[(0,2513,28)])
  one_hot.160: bits[29] = one_hot(reverse.159, lsb_prio=true, id=160, pos=[(0,2513,28)])
  encode.161: bits[5] = encode(one_hot.160, id=161, pos=[(0,2513,28)])
  leading_zeroes: bits[28] = zero_ext(encode.161, new_bit_count=28, id=162, pos=[(0,2513,28)])
  literal.163: bits[28] = literal(value=1, id=163, pos=[(0,2514,52)])
  carry_bit: bits[1] = bit_slice(abs_fraction, start=27, width=1, id=152, pos=[(0,2507,32)])
  cancel: bits[1] = ugt(leading_zeroes, literal.163, id=164, pos=[(0,2514,32)])
  tuple.169: (bits[1], bits[1]) = tuple(carry_bit, cancel, id=169, pos=[(0,2517,33)])
  literal.190: bits[1] = literal(value=0, id=190, pos=[(0,2520,9)])
  tuple_index.189: bits[1] = tuple_index(tuple.169, index=0, id=189)
  literal.181: bits[1] = literal(value=0, id=181, pos=[(0,2519,9)])
  tuple_index.180: bits[1] = tuple_index(tuple.169, index=0, id=180)
  literal.172: bits[1] = literal(value=1, id=172, pos=[(0,2518,9)])
  tuple_index.171: bits[1] = tuple_index(tuple.169, index=0, id=171)
  literal.188: bits[1] = literal(value=1, id=188)
  eq.191: bits[1] = eq(literal.190, tuple_index.189, id=191)
  literal.194: bits[1] = literal(value=0, id=194, pos=[(0,2520,16)])
  tuple_index.193: bits[1] = tuple_index(tuple.169, index=1, id=193)
  literal.179: bits[1] = literal(value=1, id=179)
  eq.182: bits[1] = eq(literal.181, tuple_index.180, id=182)
  literal.185: bits[1] = literal(value=1, id=185, pos=[(0,2519,16)])
  tuple_index.184: bits[1] = tuple_index(tuple.169, index=1, id=184)
  literal.170: bits[1] = literal(value=1, id=170)
  eq.173: bits[1] = eq(literal.172, tuple_index.171, id=173)
  literal.176: bits[1] = literal(value=0, id=176, pos=[(0,2518,15)])
  tuple_index.175: bits[1] = tuple_index(tuple.169, index=1, id=175)
  and.192: bits[1] = and(literal.188, eq.191, id=192)
  eq.195: bits[1] = eq(literal.194, tuple_index.193, id=195)
  and.183: bits[1] = and(literal.179, eq.182, id=183)
  eq.186: bits[1] = eq(literal.185, tuple_index.184, id=186)
  and.174: bits[1] = and(literal.170, eq.173, id=174)
  eq.177: bits[1] = eq(literal.176, tuple_index.175, id=177)
  literal.153: bits[32] = literal(value=1, id=153, pos=[(0,2508,46)])
  literal.165: bits[28] = literal(value=1, id=165, pos=[(0,2516,61)])
  and.196: bits[1] = and(and.192, eq.195, id=196)
  and.187: bits[1] = and(and.183, eq.186, id=187)
  and.178: bits[1] = and(and.174, eq.177, id=178)
  shrl.154: bits[28] = shrl(abs_fraction, literal.153, id=154, pos=[(0,2508,39)])
  bit_slice.156: bits[1] = bit_slice(abs_fraction, start=0, width=1, id=156, pos=[(0,2509,55)])
  sub.166: bits[28] = sub(leading_zeroes, literal.165, id=166, pos=[(0,2516,41)])
  concat.207: bits[3] = concat(and.196, and.187, and.178, id=207)
  carry_fraction: bits[27] = bit_slice(shrl.154, start=0, width=27, id=155)
  zero_ext.157: bits[27] = zero_ext(bit_slice.156, new_bit_count=27, id=157)
  shll.167: bits[28] = shll(abs_fraction, sub.166, id=167, pos=[(0,2516,22)])
  literal.200: bits[27] = literal(value=0, id=200, pos=[(0,2521,63)])
  one_hot.208: bits[4] = one_hot(concat.207, lsb_prio=true, id=208)
  carry_fraction__1: bits[27] = or(carry_fraction, zero_ext.157, id=158, pos=[(0,2509,40)])
  cancel_fraction: bits[27] = bit_slice(shll.167, start=0, width=27, id=168)
  bit_slice.197: bits[27] = bit_slice(abs_fraction, start=0, width=27, id=197)
  identity.206: bits[27] = identity(literal.200, id=206)
  shifted_fraction: bits[27] = one_hot_sel(one_hot.208, cases=[carry_fraction__1, cancel_fraction, bit_slice.197, identity.206], id=209)
  normal_chunk: bits[3] = bit_slice(shifted_fraction, start=0, width=3, id=210, pos=[(0,2534,39)])
  literal.212: bits[3] = literal(value=4, id=212, pos=[(0,2536,41)])
  half_way_chunk: bits[2] = bit_slice(shifted_fraction, start=2, width=2, id=211, pos=[(0,2535,41)])
  literal.214: bits[2] = literal(value=3, id=214, pos=[(0,2536,71)])
  ugt.213: bits[1] = ugt(normal_chunk, literal.212, id=213, pos=[(0,2536,36)])
  eq.215: bits[1] = eq(half_way_chunk, literal.214, id=215, pos=[(0,2536,65)])
  zero_ext.217: bits[28] = zero_ext(shifted_fraction, new_bit_count=28, id=217)
  literal.218: bits[28] = literal(value=8, id=218, pos=[(0,2540,68)])
  do_round_up: bits[1] = or(ugt.213, eq.215, id=216, pos=[(0,2536,46)])
  zero_ext.220: bits[28] = zero_ext(shifted_fraction, new_bit_count=28, id=220)
  add.219: bits[28] = add(zero_ext.217, literal.218, id=219, pos=[(0,2540,48)])
  rounded_fraction: bits[28] = sel(do_round_up, cases=[zero_ext.220, add.219], id=221, pos=[(0,2539,27)])
  x_bexp__1: bits[8] = tuple_index(x, index=1, id=231, pos=[(0,2555,26)])
  rounding_carry: bits[1] = bit_slice(rounded_fraction, start=27, width=1, id=222, pos=[(0,2544,41)])
  zero_ext.232: bits[10] = zero_ext(x_bexp__1, new_bit_count=10, id=232)
  zero_ext.233: bits[10] = zero_ext(rounding_carry, new_bit_count=10, id=233)
  literal.115: bits[29] = literal(value=0, id=115, pos=[(0,2493,58)])
  literal.117: bits[29] = literal(value=0, id=117, pos=[(0,2494,77)])
  add.234: bits[10] = add(zero_ext.232, zero_ext.233, id=234, pos=[(0,2555,50)])
  literal.235: bits[10] = literal(value=1, id=235, pos=[(0,2556,38)])
  fraction_is_zero: bits[1] = eq(fraction, literal.115, id=116, pos=[(0,2493,36)])
  slt.118: bits[1] = slt(fraction, literal.117, id=118, pos=[(0,2494,56)])
  add.236: bits[10] = add(add.234, literal.235, id=236, pos=[(0,2555,86)])
  bit_slice.237: bits[10] = bit_slice(leading_zeroes, start=0, width=10, id=237)
  tuple.119: (bits[1], bits[1]) = tuple(fraction_is_zero, slt.118, id=119, pos=[(0,2494,28)])
  wide_exponent: bits[10] = sub(add.236, bit_slice.237, id=238, pos=[(0,2556,40)])
  literal.239: bits[10] = literal(value=0, id=239, pos=[(0,2557,60)])
  bit_slice.224: bits[1] = bit_slice(rounded_fraction, start=27, width=1, id=224, pos=[(0,2550,60)])
  literal.226: bits[3] = literal(value=0, id=226, pos=[(0,2550,85)])
  literal.225: bits[3] = literal(value=1, id=225, pos=[(0,2550,71)])
  literal.133: bits[1] = literal(value=0, id=133, pos=[(0,2496,9)])
  tuple_index.132: bits[1] = tuple_index(tuple.119, index=0, id=132)
  literal.122: bits[1] = literal(value=1, id=122, pos=[(0,2495,9)])
  tuple_index.121: bits[1] = tuple_index(tuple.119, index=0, id=121)
  wide_exponent__1: bits[10] = sel(fraction_is_zero, cases=[wide_exponent, literal.239], id=240, pos=[(0,2557,24)])
  literal.241: bits[10] = literal(value=0, id=241, pos=[(0,2560,57)])
  bit_slice.223: bits[3] = bit_slice(GUARD_ROUND_STICKY_BITS, start=0, width=3, id=223)
  sel.227: bits[3] = sel(bit_slice.224, cases=[literal.226, literal.225], id=227, pos=[(0,2550,41)])
  literal.131: bits[1] = literal(value=1, id=131)
  eq.134: bits[1] = eq(literal.133, tuple_index.132, id=134)
  literal.137: bits[1] = literal(value=1, id=137, pos=[(0,2496,16)])
  tuple_index.136: bits[1] = tuple_index(tuple.119, index=1, id=136)
  literal.120: bits[1] = literal(value=1, id=120)
  eq.123: bits[1] = eq(literal.122, tuple_index.121, id=123)
  x_sign__2: bits[1] = tuple_index(x, index=0, id=265, pos=[(0,2585,59)])
  literal.266: bits[1] = literal(value=0, id=266, pos=[(0,2585,71)])
  y_sign__4: bits[1] = tuple_index(y, index=0, id=270, pos=[(0,2586,59)])
  literal.271: bits[1] = literal(value=0, id=271, pos=[(0,2586,71)])
  x_sign__3: bits[1] = tuple_index(x, index=0, id=278, pos=[(0,2591,58)])
  literal.279: bits[1] = literal(value=1, id=279, pos=[(0,2591,70)])
  y_sign__5: bits[1] = tuple_index(y, index=0, id=283, pos=[(0,2592,58)])
  literal.284: bits[1] = literal(value=1, id=284, pos=[(0,2592,70)])
  slt.242: bits[1] = slt(wide_exponent__1, literal.241, id=242, pos=[(0,2560,41)])
  bit_slice.244: bits[9] = bit_slice(wide_exponent__1, start=0, width=9, id=244)
  literal.243: bits[9] = literal(value=0, id=243, pos=[(0,2561,21)])
  fraction_shift: bits[3] = add(bit_slice.223, sel.227, id=228, pos=[(0,2550,38)])
  and.135: bits[1] = and(literal.131, eq.134, id=135)
  eq.138: bits[1] = eq(literal.137, tuple_index.136, id=138)
  and.124: bits[1] = and(literal.120, eq.123, id=124)
  literal.126: bits[1] = literal(value=1, id=126, pos=[(0,2495,15)])
  invoke.264: bits[1] = invoke(x, to_apply=__adler32__is_inf__8_23, id=264, pos=[(0,2585,29)])
  eq.267: bits[1] = eq(x_sign__2, literal.266, id=267, pos=[(0,2585,65)])
  invoke.269: bits[1] = invoke(y, to_apply=__adler32__is_inf__8_23, id=269, pos=[(0,2586,29)])
  eq.272: bits[1] = eq(y_sign__4, literal.271, id=272, pos=[(0,2586,65)])
  invoke.277: bits[1] = invoke(x, to_apply=__adler32__is_inf__8_23, id=277, pos=[(0,2591,29)])
  eq.280: bits[1] = eq(x_sign__3, literal.279, id=280, pos=[(0,2591,64)])
  invoke.282: bits[1] = invoke(y, to_apply=__adler32__is_inf__8_23, id=282, pos=[(0,2592,29)])
  eq.285: bits[1] = eq(y_sign__5, literal.284, id=285, pos=[(0,2592,64)])
  MAX_EXPONENT: bits[8] = invoke(to_apply=__adler32__mask_bits__8, id=250, pos=[(0,2573,34)])
  wide_exponent__2: bits[9] = sel(slt.242, cases=[bit_slice.244, literal.243], id=245, pos=[(0,2560,24)])
  literal.246: bits[9] = literal(value=1, id=246, pos=[(0,2570,40)])
  shrl.229: bits[28] = shrl(rounded_fraction, fraction_shift, id=229, pos=[(0,2551,44)])
  and.139: bits[1] = and(and.135, eq.138, id=139)
  and.127: bits[1] = and(and.124, literal.126, id=127)
  and.268: bits[1] = and(invoke.264, eq.267, id=268, pos=[(0,2585,54)])
  and.273: bits[1] = and(invoke.269, eq.272, id=273, pos=[(0,2586,54)])
  and.281: bits[1] = and(invoke.277, eq.280, id=281, pos=[(0,2591,54)])
  and.286: bits[1] = and(invoke.282, eq.285, id=286, pos=[(0,2592,54)])
  SATURATED_EXPONENT: bits[9] = zero_ext(MAX_EXPONENT, new_bit_count=9, id=251)
  ult.247: bits[1] = ult(wide_exponent__2, literal.246, id=247, pos=[(0,2570,25)])
  result_fraction: bits[23] = bit_slice(shrl.229, start=0, width=23, id=230)
  literal.248: bits[23] = literal(value=0, id=248, pos=[(0,2570,60)])
  or.201: bits[1] = or(and.178, and.187, and.196, id=201)
  concat.144: bits[2] = concat(and.139, and.127, id=144)
  x_sign__1: bits[1] = tuple_index(x, index=0, id=128, pos=[(0,2495,22)])
  y_sign__1: bits[1] = tuple_index(y, index=0, id=129, pos=[(0,2495,32)])
  y_sign__2: bits[1] = tuple_index(y, index=0, id=140, pos=[(0,2496,27)])
  invoke.288: bits[1] = invoke(x, to_apply=__adler32__is_nan__8_23, id=288, pos=[(0,2593,30)])
  invoke.289: bits[1] = invoke(y, to_apply=__adler32__is_nan__8_23, id=289, pos=[(0,2593,63)])
  has_pos_inf: bits[1] = or(and.268, and.273, id=274, pos=[(0,2585,75)])
  has_neg_inf: bits[1] = or(and.281, and.286, id=287, pos=[(0,2591,74)])
  invoke.258: bits[1] = invoke(x, to_apply=__adler32__is_inf__8_23, id=258, pos=[(0,2581,31)])
  invoke.259: bits[1] = invoke(y, to_apply=__adler32__is_inf__8_23, id=259, pos=[(0,2581,65)])
  ult.252: bits[1] = ult(wide_exponent__2, SATURATED_EXPONENT, id=252, pos=[(0,2576,25)])
  literal.253: bits[23] = literal(value=0, id=253, pos=[(0,2576,89)])
  result_fraction__1: bits[23] = sel(ult.247, cases=[result_fraction, literal.248], id=249, pos=[(0,2570,8)])
  literal.294: bits[32] = literal(value=1, id=294, pos=[(0,2595,70)])
  not.202: bits[1] = not(or.201, id=202)
  one_hot.145: bits[3] = one_hot(concat.144, lsb_prio=true, id=145)
  and.130: bits[1] = and(x_sign__1, y_sign__1, id=130, pos=[(0,2495,28)])
  not.141: bits[1] = not(y_sign__2, id=141, pos=[(0,2496,25)])
  y_sign__3: bits[1] = tuple_index(y, index=0, id=143, pos=[(0,2497,14)])
  ult.255: bits[1] = ult(wide_exponent__2, SATURATED_EXPONENT, id=255, pos=[(0,2578,25)])
  bit_slice.256: bits[8] = bit_slice(wide_exponent__2, start=0, width=8, id=256)
  or.290: bits[1] = or(invoke.288, invoke.289, id=290, pos=[(0,2593,55)])
  and.291: bits[1] = and(has_pos_inf, has_neg_inf, id=291, pos=[(0,2594,37)])
  is_operand_inf: bits[1] = or(invoke.258, invoke.259, id=260, pos=[(0,2581,56)])
  result_fraction__2: bits[23] = sel(ult.252, cases=[literal.253, result_fraction__1], id=254, pos=[(0,2576,8)])
  literal.262: bits[23] = literal(value=0, id=262, pos=[(0,2583,62)])
  literal.293: bits[23] = literal(value=1, id=293, pos=[(0,2595,46)])
  sub.295: bits[32] = sub(FRACTION_SZ, literal.294, id=295, pos=[(0,2595,64)])
  and.203: bits[1] = and(__activated, not.202, id=203)
  result_sign: bits[1] = one_hot_sel(one_hot.145, cases=[and.130, not.141, y_sign__3], id=146)
  not.275: bits[1] = not(has_pos_inf, id=275, pos=[(0,2587,42)])
  result_exponent: bits[8] = sel(ult.255, cases=[MAX_EXPONENT, bit_slice.256], id=257, pos=[(0,2578,8)])
  is_result_nan: bits[1] = or(or.290, and.291, id=292, pos=[(0,2593,88)])
  result_fraction__3: bits[23] = sel(is_operand_inf, cases=[result_fraction__2, literal.262], id=263, pos=[(0,2583,26)])
  FRACTION_HIGH_BIT: bits[23] = shll(literal.293, sub.295, id=296, pos=[(0,2595,48)])
  not.204: bits[1] = not(and.203, id=204)
  result_sign__1: bits[1] = sel(is_operand_inf, cases=[result_sign, not.275], id=276, pos=[(0,2587,22)])
  literal.299: bits[1] = literal(value=0, id=299, pos=[(0,2598,44)])
  result_exponent__1: bits[8] = sel(is_operand_inf, cases=[result_exponent, MAX_EXPONENT], id=261, pos=[(0,2582,26)])
  result_fraction__4: bits[23] = sel(is_result_nan, cases=[result_fraction__3, FRACTION_HIGH_BIT], id=298, pos=[(0,2597,26)])
  EXP_SZ: bits[32] = literal(value=8, id=51, pos=[(0,2444,11)])
  literal.53: bits[32] = literal(value=1, id=53, pos=[(0,2448,39)])
  assert.205: token = assert(__token, not.204, message="Assertion failure via fail! @ adler32.x:2522:19-2522:66", label="carry_and_cancel", id=205)
  result_sign__2: bits[1] = sel(is_result_nan, cases=[result_sign__1, literal.299], id=300, pos=[(0,2598,22)])
  result_exponent__2: bits[8] = sel(is_result_nan, cases=[result_exponent__1, MAX_EXPONENT], id=297, pos=[(0,2596,26)])
  zero_ext.301: bits[23] = zero_ext(result_fraction__4, new_bit_count=23, id=301)
  literal.55: bits[32] = literal(value=1, id=55, pos=[(0,2450,31)])
  WIDE_EXP: bits[32] = add(EXP_SZ, literal.53, id=54, pos=[(0,2448,33)])
  literal.63: bits[32] = literal(value=1, id=63, pos=[(0,2459,36)])
  literal.65: bits[32] = literal(value=1, id=65, pos=[(0,2463,57)])
  after_all.303: token = after_all(assert.205, id=303)
  tuple.302: (bits[1], bits[8], bits[23]) = tuple(result_sign__2, result_exponent__2, zero_ext.301, id=302, pos=[(0,2601,33)])
  CARRY_EXP: bits[32] = add(literal.55, WIDE_EXP, id=56, pos=[(0,2450,33)])
  CARRY_FRACTION: bits[32] = add(literal.63, WIDE_FRACTION, id=64, pos=[(0,2459,38)])
  NORMALIZED_FRACTION: bits[32] = sub(WIDE_FRACTION, literal.65, id=66, pos=[(0,2463,51)])
  tuple_index.125: bits[1] = tuple_index(tuple.119, index=1, id=125)
  literal.142: bits[1] = literal(value=1, id=142, pos=[(0,2497,8)])
  literal.198: bits[1] = literal(value=1, id=198, pos=[(0,2521,8)])
  literal.199: bits[8][16] = literal(value=[99, 97, 114, 114, 121, 95, 97, 110, 100, 95, 99, 97, 110, 99, 101, 108], id=199, pos=[(0,2521,19)])
  ret tuple.304: (token, (bits[1], bits[8], bits[23])) = tuple(after_all.303, tuple.302, id=304)
}

fn __itok__adler32__add_two_f32(__token: token, __activated: bits[1], a: (bits[1], bits[8], bits[23]), b: (bits[1], bits[8], bits[23])) -> (token, (bits[1], bits[8], bits[23])) {
  invoke.309: (token, (bits[1], bits[8], bits[23])) = invoke(__token, __activated, a, b, to_apply=__itok__adler32__add__8_23, id=309, pos=[(0,3479,17)])
  tuple_index.310: token = tuple_index(invoke.309, index=0, id=310)
  after_all.312: token = after_all(tuple_index.310, id=312)
  res: (bits[1], bits[8], bits[23]) = tuple_index(invoke.309, index=1, id=311)
  ret tuple.313: (token, (bits[1], bits[8], bits[23])) = tuple(after_all.312, res, id=313)
}

top fn __adler32__add_two_f32(a: (bits[1], bits[8], bits[23]), b: (bits[1], bits[8], bits[23])) -> (bits[1], bits[8], bits[23]) {
  after_all.316: token = after_all(id=316)
  literal.317: bits[1] = literal(value=1, id=317)
  invoke.318: (token, (bits[1], bits[8], bits[23])) = invoke(after_all.316, literal.317, a, b, to_apply=__itok__adler32__add_two_f32, id=318)
  ret tuple_index.319: (bits[1], bits[8], bits[23]) = tuple_index(invoke.318, index=1, id=319)
}
