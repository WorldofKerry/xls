package adler32

file_number 0 "adler32.x"

top fn __adler32__add_two_f32(a: (bits[1], bits[8], bits[23]), b: (bits[1], bits[8], bits[23])) -> (bits[1], bits[8], bits[23]) {
  b_bexp__2: bits[8] = tuple_index(b, index=1, id=893, pos=[(0,2466,67)])
  literal.894: bits[1] = literal(value=0, id=894, pos=[(0,2466,57)])
  a_bexp__2: bits[8] = tuple_index(a, index=1, id=895, pos=[(0,2466,59)])
  literal.1229: bits[1] = literal(value=0, id=1229, pos=[(0,2466,57)])
  not.896: bits[8] = not(b_bexp__2, id=896, pos=[(0,2388,69)])
  concat.897: bits[9] = concat(literal.894, a_bexp__2, id=897, pos=[(0,2466,57)])
  concat.898: bits[9] = concat(literal.1229, not.896, id=898, pos=[(0,2466,57)])
  sum: bits[9] = add(concat.897, concat.898, id=899, pos=[(0,2374,14)])
  bit_slice.906: bits[1] = bit_slice(sum, start=8, width=1, id=906, pos=[(0,2389,36)])
  tuple_index.914: bits[23] = tuple_index(a, index=2, id=914, pos=[(0,2467,17)])
  tuple_index.913: bits[23] = tuple_index(b, index=2, id=913, pos=[(0,2467,17)])
  y_bexp: bits[8] = sel(bit_slice.906, cases=[a_bexp__2, b_bexp__2], id=1146, pos=[(0,2467,17)])
  literal.916: bits[8] = literal(value=0, id=916, pos=[(0,2475,41)])
  bit_slice.904: bits[8] = bit_slice(sum, start=0, width=8, id=904, pos=[(0,2388,9)])
  literal.1160: bits[8] = literal(value=1, id=1160, pos=[(0,2374,30)])
  literal.917: bits[2] = literal(value=1, id=917, pos=[(0,2471,59)])
  y_fraction: bits[23] = sel(bit_slice.906, cases=[tuple_index.914, tuple_index.913], id=1147, pos=[(0,2467,17)])
  literal.919: bits[3] = literal(value=0, id=919, pos=[(0,2471,59)])
  ne.920: bits[1] = ne(y_bexp, literal.916, id=920, pos=[(0,2475,17)])
  not.907: bits[8] = not(bit_slice.904, id=907, pos=[(0,2391,46)])
  incremented_sum__1: bits[8] = add(bit_slice.904, literal.1160, id=1159, pos=[(0,2374,18)])
  wide_y: bits[28] = concat(literal.917, y_fraction, literal.919, id=921, pos=[(0,2471,59)])
  sign_ext.922: bits[28] = sign_ext(ne.920, new_bit_count=28, id=922, pos=[(0,2475,17)])
  literal.923: bits[8] = literal(value=28, id=923, pos=[(0,3479,17)])
  a_bexpbs_difference__1: bits[8] = sel(bit_slice.906, cases=[not.907, incremented_sum__1], id=910, pos=[(0,2391,25)])
  x_bexp: bits[8] = sel(bit_slice.906, cases=[b_bexp__2, a_bexp__2], id=1148, pos=[(0,2467,17)])
  literal.1235: bits[8] = literal(value=0, id=1235, pos=[(0,2475,41)])
  wide_y__1: bits[28] = and(wide_y, sign_ext.922, id=926, pos=[(0,2475,17)])
  sub.927: bits[8] = sub(literal.923, a_bexpbs_difference__1, id=927, pos=[(0,2486,57)])
  literal.1237: bits[2] = literal(value=1, id=1237, pos=[(0,2471,59)])
  x_fraction: bits[23] = sel(bit_slice.906, cases=[tuple_index.913, tuple_index.914], id=1149, pos=[(0,2467,17)])
  literal.1238: bits[3] = literal(value=0, id=1238, pos=[(0,2471,59)])
  ne.929: bits[1] = ne(x_bexp, literal.1235, id=929, pos=[(0,2474,17)])
  dropped: bits[28] = shll(wide_y__1, sub.927, id=930, pos=[(0,2486,25)])
  wide_x: bits[28] = concat(literal.1237, x_fraction, literal.1238, id=933, pos=[(0,2470,59)])
  sign_ext.934: bits[28] = sign_ext(ne.929, new_bit_count=28, id=934, pos=[(0,2474,17)])
  bit_slice.935: bits[25] = bit_slice(dropped, start=3, width=25, id=935, pos=[(0,2487,26)])
  literal.936: bits[25] = literal(value=0, id=936, pos=[(0,2487,26)])
  tuple_index.932: bits[1] = tuple_index(b, index=0, id=932, pos=[(0,2467,17)])
  tuple_index.931: bits[1] = tuple_index(a, index=0, id=931, pos=[(0,2467,17)])
  wide_x__1: bits[28] = and(wide_x, sign_ext.934, id=939, pos=[(0,2474,17)])
  literal.940: bits[27] = literal(value=0, id=940, pos=[(0,3479,17)])
  ne.941: bits[1] = ne(bit_slice.935, literal.936, id=941, pos=[(0,2487,26)])
  x_sign: bits[1] = sel(bit_slice.906, cases=[tuple_index.932, tuple_index.931], id=1150, pos=[(0,2467,17)])
  y_sign: bits[1] = sel(bit_slice.906, cases=[tuple_index.931, tuple_index.932], id=1151, pos=[(0,2467,17)])
  neg.943: bits[28] = neg(wide_x__1, id=943, pos=[(0,2481,41)])
  shrl.944: bits[28] = shrl(wide_y__1, a_bexpbs_difference__1, id=944, pos=[(0,2488,27)])
  sticky: bits[28] = concat(literal.940, ne.941, id=945, pos=[(0,3479,17)])
  xor.942: bits[1] = xor(x_sign, y_sign, id=942, pos=[(0,2481,29)])
  bit_slice.1175: bits[25] = bit_slice(wide_x__1, start=3, width=25, id=1175, pos=[(0,2481,19)])
  bit_slice.1176: bits[25] = bit_slice(neg.943, start=3, width=25, id=1176, pos=[(0,2481,19)])
  addend_y__2: bits[28] = or(shrl.944, sticky, id=948, pos=[(0,2488,58)])
  sel.1179: bits[25] = sel(xor.942, cases=[bit_slice.1175, bit_slice.1176], id=1179, pos=[(0,2481,19)])
  literal.1233: bits[1] = literal(value=0, id=1233, pos=[(0,2466,57)])
  bit_slice.1202: bits[25] = bit_slice(addend_y__2, start=3, width=25, id=1202, pos=[(0,2492,52)])
  sign_ext.1201: bits[26] = sign_ext(sel.1179, new_bit_count=26, id=1201, pos=[(0,2492,52)])
  concat.1203: bits[26] = concat(literal.1233, bit_slice.1202, id=1203, pos=[(0,2492,52)])
  add.1187: bits[26] = add(sign_ext.1201, concat.1203, id=1187, pos=[(0,2492,52)])
  bit_slice.1196: bits[25] = bit_slice(add.1187, start=0, width=25, id=1196, pos=[(0,2492,52)])
  bit_slice.1204: bits[3] = bit_slice(addend_y__2, start=0, width=3, id=1204, pos=[(0,2492,52)])
  concat.1214: bits[28] = concat(bit_slice.1196, bit_slice.1204, id=1214, pos=[(0,2492,52)])
  bit_slice.1198: bits[1] = bit_slice(add.1187, start=25, width=1, id=1198, pos=[(0,2502,21)])
  neg.954: bits[28] = neg(concat.1214, id=954, pos=[(0,2502,46)])
  abs_fraction__2: bits[28] = sel(bit_slice.1198, cases=[concat.1214, neg.954], id=955, pos=[(0,2502,9)])
  reverse.956: bits[28] = reverse(abs_fraction__2, id=956, pos=[(0,2513,28)])
  one_hot.957: bits[29] = one_hot(reverse.956, lsb_prio=true, id=957, pos=[(0,2513,28)])
  encode.958: bits[5] = encode(one_hot.957, id=958, pos=[(0,2513,28)])
  bit_slice.959: bits[4] = bit_slice(encode.958, start=1, width=4, id=959, pos=[(0,2514,32)])
  cancel__2: bits[1] = or_reduce(bit_slice.959, id=960, pos=[(0,2514,32)])
  carry_bit: bits[1] = bit_slice(abs_fraction__2, start=27, width=1, id=961, pos=[(0,2507,32)])
  literal.964: bits[23] = literal(value=0, id=964, pos=[(0,2513,28)])
  not.962: bits[1] = not(cancel__2, id=962, pos=[(0,3479,17)])
  not.963: bits[1] = not(carry_bit, id=963, pos=[(0,3479,17)])
  literal.968: bits[26] = literal(value=0, id=968, pos=[(0,3479,17)])
  bit_slice.969: bits[1] = bit_slice(abs_fraction__2, start=0, width=1, id=969, pos=[(0,2509,55)])
  leading_zeroes: bits[28] = concat(literal.964, encode.958, id=970, pos=[(0,2513,28)])
  literal.971: bits[28] = literal(value=268435455, id=971, pos=[(0,2516,41)])
  nor.965: bits[1] = nor(carry_bit, cancel__2, id=965, pos=[(0,3479,17)])
  nor.966: bits[1] = nor(carry_bit, not.962, id=966, pos=[(0,3479,17)])
  nor.967: bits[1] = nor(not.963, cancel__2, id=967, pos=[(0,3479,17)])
  carry_fraction: bits[27] = bit_slice(abs_fraction__2, start=1, width=27, id=973, pos=[(0,2508,39)])
  concat.974: bits[27] = concat(literal.968, bit_slice.969, id=974, pos=[(0,3479,17)])
  bit_slice.975: bits[27] = bit_slice(abs_fraction__2, start=0, width=27, id=975, pos=[(0,2516,22)])
  add.976: bits[28] = add(leading_zeroes, literal.971, id=976, pos=[(0,2516,41)])
  concat.1183: bits[3] = concat(nor.965, nor.966, nor.967, id=1183, pos=[(0,3479,17)])
  carry_fraction__1: bits[27] = or(carry_fraction, concat.974, id=978, pos=[(0,2509,40)])
  cancel_fraction: bits[27] = shll(bit_slice.975, add.976, id=979, pos=[(0,3479,17)])
  shifted_fraction: bits[27] = one_hot_sel(concat.1183, cases=[carry_fraction__1, cancel_fraction, bit_slice.975], id=1182, pos=[(0,3479,17)])
  literal.1234: bits[1] = literal(value=0, id=1234, pos=[(0,2466,57)])
  bit_slice.1206: bits[24] = bit_slice(shifted_fraction, start=3, width=24, id=1206, pos=[(0,2540,48)])
  normal_chunk: bits[3] = bit_slice(shifted_fraction, start=0, width=3, id=981, pos=[(0,2534,39)])
  literal.982: bits[3] = literal(value=4, id=982, pos=[(0,2536,41)])
  half_way_chunk: bits[2] = bit_slice(shifted_fraction, start=2, width=2, id=983, pos=[(0,2535,41)])
  literal.984: bits[2] = literal(value=3, id=984, pos=[(0,2536,71)])
  concat.1207: bits[25] = concat(literal.1234, bit_slice.1206, id=1207, pos=[(0,2540,48)])
  literal.1195: bits[25] = literal(value=1, id=1195, pos=[(0,2540,48)])
  ugt.985: bits[1] = ugt(normal_chunk, literal.982, id=985, pos=[(0,2536,36)])
  eq.986: bits[1] = eq(half_way_chunk, literal.984, id=986, pos=[(0,2536,65)])
  literal.1230: bits[1] = literal(value=0, id=1230, pos=[(0,2466,57)])
  add.1192: bits[25] = add(concat.1207, literal.1195, id=1192, pos=[(0,2540,48)])
  do_round_up: bits[1] = or(ugt.985, eq.986, id=989, pos=[(0,2536,46)])
  concat.987: bits[28] = concat(literal.1230, shifted_fraction, id=987, pos=[(0,3479,17)])
  concat.1213: bits[28] = concat(add.1192, normal_chunk, id=1213, pos=[(0,2540,48)])
  rounded_fraction: bits[28] = sel(do_round_up, cases=[concat.987, concat.1213], id=991, pos=[(0,2539,27)])
  literal.1231: bits[1] = literal(value=0, id=1231, pos=[(0,2466,57)])
  literal.1236: bits[8] = literal(value=0, id=1236, pos=[(0,2475,41)])
  rounding_carry: bits[1] = bit_slice(rounded_fraction, start=27, width=1, id=992, pos=[(0,2544,41)])
  concat.993: bits[9] = concat(literal.1231, x_bexp, id=993, pos=[(0,3479,17)])
  concat.994: bits[9] = concat(literal.1236, rounding_carry, id=994, pos=[(0,3479,17)])
  literal.1232: bits[1] = literal(value=0, id=1232, pos=[(0,2466,57)])
  add.995: bits[9] = add(concat.993, concat.994, id=995, pos=[(0,2555,50)])
  literal.1245: bits[26] = literal(value=0, id=1245, pos=[(0,3479,17)])
  literal.1239: bits[3] = literal(value=0, id=1239, pos=[(0,2471,59)])
  concat.996: bits[10] = concat(literal.1232, add.995, id=996, pos=[(0,2555,50)])
  literal.997: bits[10] = literal(value=1, id=997, pos=[(0,2556,38)])
  literal.998: bits[5] = literal(value=0, id=998, pos=[(0,3479,17)])
  ne.1216: bits[1] = ne(add.1187, literal.1245, id=1216, pos=[(0,2557,24)])
  ne.1218: bits[1] = ne(bit_slice.1204, literal.1239, id=1218, pos=[(0,2557,24)])
  add.1000: bits[10] = add(concat.996, literal.997, id=1000, pos=[(0,2555,86)])
  concat.1001: bits[10] = concat(literal.998, encode.958, id=1001, pos=[(0,3479,17)])
  or.1219: bits[1] = or(ne.1216, ne.1218, id=1219, pos=[(0,2557,24)])
  wide_exponent: bits[10] = sub(add.1000, concat.1001, id=1003, pos=[(0,2556,40)])
  sign_ext.1004: bits[10] = sign_ext(or.1219, new_bit_count=10, id=1004, pos=[(0,2557,24)])
  wide_exponent__1: bits[10] = and(wide_exponent, sign_ext.1004, id=1007, pos=[(0,2557,24)])
  bit_slice.1016: bits[1] = bit_slice(wide_exponent__1, start=9, width=1, id=1016, pos=[(0,2560,41)])
  not.1021: bits[1] = not(bit_slice.1016, id=1021, pos=[(0,2560,24)])
  MAX_EXPONENT__3: bits[8] = literal(value=255, id=1249, pos=[(0,1022,24)])
  literal.1243: bits[23] = literal(value=0, id=1243, pos=[(0,2513,28)])
  MAX_EXPONENT__4: bits[8] = literal(value=255, id=1250, pos=[(0,1022,24)])
  literal.1244: bits[23] = literal(value=0, id=1244, pos=[(0,2513,28)])
  MAX_EXPONENT: bits[8] = literal(value=255, id=1009, pos=[(0,1022,24)])
  literal.1241: bits[23] = literal(value=0, id=1241, pos=[(0,2513,28)])
  MAX_EXPONENT__1: bits[8] = literal(value=255, id=1247, pos=[(0,1022,24)])
  literal.1242: bits[23] = literal(value=0, id=1242, pos=[(0,2513,28)])
  literal.1246: bits[26] = literal(value=0, id=1246, pos=[(0,3479,17)])
  literal.1240: bits[3] = literal(value=0, id=1240, pos=[(0,2471,59)])
  bit_slice.1024: bits[9] = bit_slice(wide_exponent__1, start=0, width=9, id=1024, pos=[(0,3479,17)])
  sign_ext.1025: bits[9] = sign_ext(not.1021, new_bit_count=9, id=1025, pos=[(0,2560,24)])
  ne.1152: bits[1] = ne(x_bexp, MAX_EXPONENT__3, id=1152, pos=[(0,2585,54)])
  ne.1153: bits[1] = ne(x_fraction, literal.1243, id=1153, pos=[(0,2585,54)])
  ne.1154: bits[1] = ne(y_bexp, MAX_EXPONENT__4, id=1154, pos=[(0,2586,54)])
  ne.1155: bits[1] = ne(y_fraction, literal.1244, id=1155, pos=[(0,2586,54)])
  eq.1017: bits[1] = eq(x_bexp, MAX_EXPONENT, id=1017, pos=[(0,1022,12)])
  eq.1018: bits[1] = eq(x_fraction, literal.1241, id=1018, pos=[(0,1022,49)])
  eq.1019: bits[1] = eq(y_bexp, MAX_EXPONENT__1, id=1019, pos=[(0,1022,12)])
  eq.1020: bits[1] = eq(y_fraction, literal.1242, id=1020, pos=[(0,1022,49)])
  eq.1221: bits[1] = eq(add.1187, literal.1246, id=1221, pos=[(0,3479,17)])
  eq.1223: bits[1] = eq(bit_slice.1204, literal.1240, id=1223, pos=[(0,3479,17)])
  literal.1028: bits[2] = literal(value=0, id=1028, pos=[(0,2550,41)])
  wide_exponent__2: bits[9] = and(bit_slice.1024, sign_ext.1025, id=1029, pos=[(0,2560,24)])
  nor.1131: bits[1] = nor(ne.1152, ne.1153, x_sign, id=1131, pos=[(0,2585,54)])
  nor.1135: bits[1] = nor(ne.1154, ne.1155, y_sign, id=1135, pos=[(0,2586,54)])
  and.1136: bits[1] = and(eq.1017, eq.1018, x_sign, id=1136, pos=[(0,2591,54)])
  and.1137: bits[1] = and(eq.1019, eq.1020, y_sign, id=1137, pos=[(0,2592,54)])
  fraction_is_zero: bits[1] = and(eq.1221, eq.1223, id=1224, pos=[(0,3479,17)])
  concat.1044: bits[3] = concat(literal.1028, rounding_carry, id=1044, pos=[(0,2550,41)])
  literal.1045: bits[3] = literal(value=3, id=1045, pos=[(0,3479,17)])
  bit_slice.1046: bits[8] = bit_slice(wide_exponent__2, start=1, width=8, id=1046, pos=[(0,2570,25)])
  bit_slice.1049: bits[8] = bit_slice(wide_exponent__2, start=0, width=8, id=1049, pos=[(0,2576,25)])
  has_pos_inf: bits[1] = or(nor.1131, nor.1135, id=1054, pos=[(0,2585,75)])
  has_neg_inf: bits[1] = or(and.1136, and.1137, id=1055, pos=[(0,2591,74)])
  nor.1139: bits[1] = nor(bit_slice.1198, fraction_is_zero, id=1139, pos=[(0,3479,17)])
  fraction_shift__1: bits[3] = add(concat.1044, literal.1045, id=1057, pos=[(0,2550,38)])
  or_reduce.1058: bits[1] = or_reduce(bit_slice.1046, id=1058, pos=[(0,2570,25)])
  bit_slice.1047: bits[1] = bit_slice(wide_exponent__2, start=0, width=1, id=1047, pos=[(0,2570,25)])
  bit_slice.1048: bits[1] = bit_slice(wide_exponent__2, start=8, width=1, id=1048, pos=[(0,2576,25)])
  and_reduce.1061: bits[1] = and_reduce(bit_slice.1049, id=1061, pos=[(0,2576,25)])
  and.1022: bits[1] = and(eq.1017, eq.1018, id=1022, pos=[(0,1022,35)])
  and.1023: bits[1] = and(eq.1019, eq.1020, id=1023, pos=[(0,1022,35)])
  and.1062: bits[1] = and(eq.1017, ne.1153, id=1062, pos=[(0,999,35)])
  and.1063: bits[1] = and(eq.1019, ne.1155, id=1063, pos=[(0,999,35)])
  and.1064: bits[1] = and(has_pos_inf, has_neg_inf, id=1064, pos=[(0,2594,37)])
  concat.1211: bits[3] = concat(nor.1139, bit_slice.1198, fraction_is_zero, id=1211, pos=[(0,3479,17)])
  and.1066: bits[1] = and(x_sign, y_sign, id=1066, pos=[(0,2495,28)])
  not.1067: bits[1] = not(y_sign, id=1067, pos=[(0,2496,25)])
  shrl.1068: bits[28] = shrl(rounded_fraction, fraction_shift__1, id=1068, pos=[(0,2551,44)])
  or.1069: bits[1] = or(or_reduce.1058, bit_slice.1047, id=1069, pos=[(0,2570,8)])
  nor.1070: bits[1] = nor(bit_slice.1048, and_reduce.1061, id=1070, pos=[(0,2576,25)])
  nor.1071: bits[1] = nor(and.1022, and.1023, id=1071, pos=[(0,2583,26)])
  is_result_nan: bits[1] = or(and.1062, and.1063, and.1064, id=1072, pos=[(0,2593,88)])
  is_operand_inf: bits[1] = or(and.1022, and.1023, id=1073, pos=[(0,2581,56)])
  result_sign: bits[1] = one_hot_sel(concat.1211, cases=[and.1066, not.1067, y_sign], id=1074, pos=[(0,3479,17)])
  not.1075: bits[1] = not(has_pos_inf, id=1075, pos=[(0,2587,42)])
  result_fraction: bits[23] = bit_slice(shrl.1068, start=0, width=23, id=1076, pos=[(0,3479,17)])
  sign_ext.1077: bits[23] = sign_ext(or.1069, new_bit_count=23, id=1077, pos=[(0,2570,8)])
  sign_ext.1078: bits[23] = sign_ext(nor.1070, new_bit_count=23, id=1078, pos=[(0,2576,8)])
  sign_ext.1079: bits[23] = sign_ext(nor.1071, new_bit_count=23, id=1079, pos=[(0,2583,26)])
  not.1080: bits[1] = not(is_result_nan, id=1080, pos=[(0,2598,22)])
  result_sign__1: bits[1] = sel(is_operand_inf, cases=[result_sign, not.1075], id=1081, pos=[(0,2587,22)])
  or.1082: bits[1] = or(is_result_nan, is_operand_inf, bit_slice.1048, and_reduce.1061, id=1082, pos=[(0,2596,26)])
  MAX_EXPONENT__2: bits[8] = literal(value=255, id=1248, pos=[(0,1022,24)])
  result_fraction__3: bits[23] = and(result_fraction, sign_ext.1077, sign_ext.1078, sign_ext.1079, id=1084, pos=[(0,2583,26)])
  FRACTION_HIGH_BIT: bits[23] = literal(value=4194304, id=1085, pos=[(0,2595,48)])
  after_all.316: token = after_all(id=316)
  nand.1100: bits[1] = nand(carry_bit, cancel__2, id=1100, pos=[(0,3479,17)])
  result_sign__2: bits[1] = and(not.1080, result_sign__1, id=1087, pos=[(0,2598,22)])
  result_exponent__2: bits[8] = sel(or.1082, cases=[bit_slice.1049, MAX_EXPONENT__2], id=1088, pos=[(0,2596,26)])
  result_fraction__4: bits[23] = sel(is_result_nan, cases=[result_fraction__3, FRACTION_HIGH_BIT], id=1089, pos=[(0,2597,26)])
  assert_889__2: token = assert(after_all.316, nand.1100, message="Assertion failure via fail! @ adler32.x:2522:19-2522:66", label="carry_and_cancel", id=1093, pos=[(0,3479,17)])
  ret tuple.1091: (bits[1], bits[8], bits[23]) = tuple(result_sign__2, result_exponent__2, result_fraction__4, id=1091, pos=[(0,2601,33)])
}
